# docker/Dockerfile.dev
# Development Dockerfile with all dev tools and debugging capabilities

FROM python:3.11-slim

WORKDIR /app

# Install system dependencies including dev tools
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    vim \
    htop \
    tree \
    ssh \
    rsync \
    graphviz \
    libgraphviz-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for some dev tools
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

# Copy all requirements
COPY requirements.txt .
COPY requirements-dev.txt .
COPY requirements-prod.txt .

# Install all Python dependencies including dev tools
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-dev.txt && \
    pip install --no-cache-dir -r requirements-prod.txt

# Install additional dev tools
RUN pip install --no-cache-dir \
    ipython \
    ipdb \
    memory_profiler \
    line_profiler \
    py-spy \
    tensorboard \
    jupyter \
    jupyterlab \
    notebook \
    voila \
    streamlit

# Create directories with proper permissions
RUN mkdir -p logs data models checkpoints results notebooks .jupyter

# Copy application code
COPY . .

# Copy dev-specific entrypoint
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set up Jupyter configuration
RUN jupyter lab --generate-config && \
    echo "c.ServerApp.ip = '0.0.0.0'" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.allow_root = True" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.open_browser = False" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.port = 8888" >> ~/.jupyter/jupyter_lab_config.py

# Set environment variables for development
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128
ENV CUDA_LAUNCH_BLOCKING=1
ENV TORCH_USE_CUDA_DSA=1
ENV ENVIRONMENT=development
ENV DEBUG=1

# Expose all necessary ports
EXPOSE 8000 8080 8888 6006 8501

# Health check for dev environment
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=3 \
    CMD python -c "import torch, numpy, pandas; print('Dev environment healthy')" || exit 1

ENTRYPOINT ["/entrypoint.sh"]
CMD ["python", "-c", "print('Development container ready. Use docker exec to run commands.')"]
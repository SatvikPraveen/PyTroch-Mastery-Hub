# docker/docker-compose.prod.yml
# Production override for Docker Compose

version: "3.8"

services:
  # Production app with optimizations
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - BUILD_ENV=production
    container_name: ml-training-app-prod
    restart: always
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://mluser:${POSTGRES_PASSWORD}@postgres:5432/mldb
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_data:/app/data:ro
      - app_models:/app/models
      - app_logs:/app/logs
      - app_checkpoints:/app/checkpoints
      - app_results:/app/results:ro
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: "3.0"
        reservations:
          memory: 3G
          cpus: "1.5"
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  # Production PostgreSQL with performance tuning
  postgres:
    image: postgres:15-alpine
    container_name: ml-postgres-prod
    restart: always
    environment:
      - POSTGRES_DB=mldb
      - POSTGRES_USER=mluser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ../scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-prod-db.sql:ro
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mluser -d mldb"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: ml-redis-prod
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_prod_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Production MLflow with S3 backend
  mlflow:
    image: python:3.11-slim
    container_name: ml-mlflow-prod
    restart: always
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mluser:${POSTGRES_PASSWORD}@postgres:5432/mldb
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://${S3_BUCKET}/mlflow-artifacts
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: >
      sh -c "pip install mlflow psycopg2-binary boto3 &&
             mlflow server
             --backend-store-uri postgresql://mluser:${POSTGRES_PASSWORD}@postgres:5432/mldb
             --default-artifact-root s3://${S3_BUCKET}/mlflow-artifacts
             --host 0.0.0.0
             --port 5000
             --serve-artifacts"
    ports:
      - "127.0.0.1:5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Remove Jupyter from production
  jupyter:
    profiles:
      - debug

  # Production TensorBoard
  tensorboard:
    image: tensorflow/tensorflow:latest
    container_name: ml-tensorboard-prod
    restart: always
    command: >
      tensorboard 
      --logdir=/logs 
      --host=0.0.0.0 
      --port=6006
      --reload_interval=60
    volumes:
      - app_logs:/logs:ro
    ports:
      - "127.0.0.1:6006:6006"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-prometheus-prod
    restart: always
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=10GB"
    volumes:
      - ../monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Production Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ml-grafana-prod
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Production Nginx with SSL
  nginx:
    image: nginx:alpine
    container_name: ml-nginx-prod
    restart: always
    volumes:
      - ../nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
      - mlflow
      - tensorboard
      - grafana
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

  # Log aggregation
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: ml-filebeat
    restart: always
    user: root
    volumes:
      - ../monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    profiles:
      - logging

volumes:
  app_data:
    driver: local
  app_models:
    driver: local
  app_logs:
    driver: local
  app_checkpoints:
    driver: local
  app_results:
    driver: local
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

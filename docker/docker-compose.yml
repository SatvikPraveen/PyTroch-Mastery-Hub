# docker/docker-compose.yml
# Main Docker Compose file for ML training framework

version: "3.8"

services:
  # Main application service
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ml-training-app
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://mluser:mlpassword@postgres:5432/mldb
      - REDIS_URL=redis://redis:6379/0
      - MODEL_STORAGE_PATH=/app/models
      - LOG_LEVEL=INFO
    volumes:
      - ../data:/app/data
      - ../models:/app/models
      - ../logs:/app/logs
      - ../checkpoints:/app/checkpoints
      - ../results:/app/results
    ports:
      - "8000:8000"
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ml-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=mldb
      - POSTGRES_USER=mluser
      - POSTGRES_PASSWORD=mlpassword
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mluser -d mldb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: ml-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ml-network

  # Jupyter notebook service
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    container_name: ml-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    volumes:
      - ../notebooks:/home/jovyan/work/notebooks
      - ../data:/home/jovyan/work/data
      - ../models:/home/jovyan/work/models
      - ../results:/home/jovyan/work/results
    ports:
      - "8888:8888"
    networks:
      - ml-network

  # MLflow tracking server
  mlflow:
    image: python:3.11-slim
    container_name: ml-mlflow
    restart: unless-stopped
    command: >
      sh -c "pip install mlflow psycopg2-binary boto3 &&
             mlflow server
             --backend-store-uri postgresql://mluser:mlpassword@postgres:5432/mldb
             --default-artifact-root /mlflow/artifacts
             --host 0.0.0.0
             --port 5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mluser:mlpassword@postgres:5432/mldb
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ml-network

  # TensorBoard service
  tensorboard:
    image: tensorflow/tensorflow:latest
    container_name: ml-tensorboard
    restart: unless-stopped
    command: >
      tensorboard --logdir=/logs --host=0.0.0.0 --port=6006
    volumes:
      - ../logs:/logs:ro
    ports:
      - "6006:6006"
    networks:
      - ml-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ml-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ml-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - ml-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ml-nginx
    restart: unless-stopped
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
      - jupyter
      - mlflow
      - tensorboard
      - grafana
    networks:
      - ml-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ml-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

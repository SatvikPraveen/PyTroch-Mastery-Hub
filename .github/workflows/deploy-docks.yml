# .github/workflows/deploy-docks.yml
# Comprehensive deployment pipeline for Docker containers across multiple platforms

name: Deploy Docker Containers

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Build and push Jupyter image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.jupyter
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-jupyter:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-jupyter:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dev:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dev:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Test Docker images
  test-images:
    name: Test Docker Images
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        image: [main, jupyter, dev]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set image name
        id: image-name
        run: |
          if [ "${{ matrix.image }}" = "main" ]; then
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Test image functionality
        run: |
          docker run --rm ${{ steps.image-name.outputs.image }} python -c "
          import torch
          import numpy as np
          import pandas as pd
          print('✅ Basic imports successful')
          print(f'PyTorch version: {torch.__version__}')
          print(f'NumPy version: {np.__version__}')
          print(f'Pandas version: {pd.__version__}')
          "

      - name: Test image health check
        if: matrix.image == 'main'
        run: |
          docker run --rm --name health-test ${{ steps.image-name.outputs.image }} &
          sleep 30
          docker exec health-test python -c "print('Health check passed')"
          docker stop health-test

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, test-images]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.ml-training.example.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to ECS Staging
        run: |
          # Update ECS task definition
          aws ecs describe-task-definition --task-definition ml-training-staging \
            --query taskDefinition > task-def.json

          # Update image in task definition
          cat task-def.json | jq --arg IMAGE "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE' > new-task-def.json

          # Register new task definition
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

          # Update service
          aws ecs update-service --cluster ml-training-staging \
            --service ml-training-staging-service \
            --task-definition ml-training-staging

      - name: Deploy to Kubernetes Staging
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Configure kubectl
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          # Update deployment
          kubectl set image deployment/ml-training-staging \
            ml-training=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=staging

          # Wait for rollout
          kubectl rollout status deployment/ml-training-staging --namespace=staging

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60

          # Run smoke tests
          curl -f https://staging.ml-training.example.com/health || exit 1
          curl -f https://staging.ml-training.example.com/api/v1/models || exit 1

          echo "✅ Staging deployment successful"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://ml-training.example.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-west-2

      - name: Create backup of current deployment
        run: |
          # Backup current task definition
          aws ecs describe-task-definition --task-definition ml-training-production \
            --query taskDefinition > backup-task-def.json

          # Store backup
          echo "BACKUP_REVISION=$(jq -r '.revision' backup-task-def.json)" >> $GITHUB_ENV

      - name: Deploy to ECS Production
        run: |
          # Update ECS task definition
          aws ecs describe-task-definition --task-definition ml-training-production \
            --query taskDefinition > task-def.json

          # Update image in task definition
          cat task-def.json | jq --arg IMAGE "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
            '.containerDefinitions[0].image = $IMAGE' > new-task-def.json

          # Register new task definition
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

          # Update service with rolling deployment
          aws ecs update-service --cluster ml-training-production \
            --service ml-training-production-service \
            --task-definition ml-training-production \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"

      - name: Deploy to Kubernetes Production
        run: |
          # Configure kubectl for production
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          # Update deployment with rolling update
          kubectl set image deployment/ml-training-production \
            ml-training=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=production

          # Wait for rollout
          kubectl rollout status deployment/ml-training-production --namespace=production --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for deployment to stabilize
          sleep 120

          # Comprehensive health checks
          curl -f https://ml-training.example.com/health || exit 1
          curl -f https://ml-training.example.com/api/v1/models || exit 1
          curl -f https://ml-training.example.com/metrics || exit 1

          # Check database connectivity
          curl -f https://ml-training.example.com/api/v1/health/db || exit 1

          echo "✅ Production deployment successful"

  # Rollback capability
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-west-2

      - name: Rollback ECS deployment
        run: |
          # Rollback to previous task definition
          aws ecs update-service --cluster ml-training-production \
            --service ml-training-production-service \
            --task-definition ml-training-production:${{ env.BACKUP_REVISION }}

      - name: Rollback Kubernetes deployment
        run: |
          # Configure kubectl
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          # Rollback deployment
          kubectl rollout undo deployment/ml-training-production --namespace=production

          # Wait for rollback to complete
          kubectl rollout status deployment/ml-training-production --namespace=production

  # Update monitoring and alerting
  update-monitoring:
    name: Update Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Update Grafana dashboards
        run: |
          # Update dashboards with new deployment info
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"dashboard": {"title": "ML Training - Production", "tags": ["production", "deployment"], "annotations": [{"text": "Deployment ${{ github.sha }}", "time": "$(date +%s)000"}]}}' \
            https://monitoring.ml-training.example.com/api/dashboards/db

      - name: Update PagerDuty maintenance
        run: |
          # End maintenance window
          curl -X PUT \
            -H "Authorization: Token token=${{ secrets.PAGERDUTY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"maintenance_window": {"end_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"}}' \
            https://api.pagerduty.com/maintenance_windows/${{ secrets.MAINTENANCE_WINDOW_ID }}

  # Post-deployment tasks
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production, update-monitoring]
    if: success()

    steps:
      - name: Update deployment tracking
        run: |
          # Create deployment record
          echo "Deployment completed successfully"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Environment: production"

      - name: Send success notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Production deployment successful!
            Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            Version: ${{ github.ref_name }}
            Deployed by: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release (for tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            - Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            - Deployed to production: $(date -u +%Y-%m-%dT%H:%M:%SZ)

            ## Container Images
            - Main: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
            - Jupyter: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-jupyter:${{ github.sha }}`
            - Development: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dev:${{ github.sha }}`
          draft: false
          prerelease: false
